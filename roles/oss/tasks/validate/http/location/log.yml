---
- name: Validate logs in access_log in location block is defined and not empty
  when:
    - _nginx_location_block.access_log is defined
    - not _nginx_location_block.access_log.off | default(false)
  ansible.builtin.assert:
    that:
      - _nginx_location_block.access_log.logs | default([]) | length > 0
    fail_msg: "Directive 'logs' in 'access_log' in location block in '{{ _nginx_http_config_file.destination }}' is not defined or empty."
    success_msg: "Directive 'logs' in 'access_log' in location block in '{{ _nginx_http_config_file.destination }}' is defined and not empty."

- name: Validate size in access_log in location block
  loop: "{{ _nginx_location_block.access_log.logs | default([]) }}"
  when:
    - not _nginx_location_block.access_log.off | default(false)
    - item.size is defined
  ansible.builtin.assert:
    that:
      - item.size | string | human_to_bytes('B') > 0
    fail_msg: "Directive 'size' in 'access_log' in location block in '{{ _nginx_http_config_file.destination }}' is not a positive size. Value: {{ item.size }}"
    success_msg: "Directive 'size' in 'access_log' in location block in '{{ _nginx_http_config_file.destination }}' is valid. Value: {{ item.size }}"

- name: Validate level in gzip in access_log in location block
  loop: "{{ _nginx_location_block.access_log.logs | default([]) }}"
  when:
    - not _nginx_location_block.access_log.off | default(false)
    - item.gzip is defined
    - item.gzip.level is defined
  ansible.builtin.assert:
    that:
      - item.gzip.level | int >= 1
      - item.gzip.level | int <= 9
    fail_msg: "Directive 'level' in 'gzip' in 'access_log' in location block in '{{ _nginx_http_config_file.destination }}' is not between 1 and 9. Value: {{ item.gzip.level }}"
    success_msg: "Directive 'level' in 'gzip' in 'access_log' in location block in '{{ _nginx_http_config_file.destination }}' is valid. Value: {{ item.gzip.level }}"

- name: Validate flush in gzip in access_log in location block
  loop: "{{ _nginx_location_block.access_log.logs | default([]) }}"
  when:
    - not _nginx_location_block.access_log.off | default(false)
    - item.flush is defined
  ansible.builtin.assert:
    that:
      - item.flush | string | community.general.to_time_unit('s') > 0
    fail_msg: "Directive 'flush' in 'access_log' in location block in '{{ _nginx_http_config_file.destination }}' is not a positive duration. Value: {{ item.flush }}"
    success_msg: "Directive 'flush' in 'access_log' in location block in '{{ _nginx_http_config_file.destination }}' is valid. Value: {{ item.flush }}"

# TODO - For use in future for logrotate and/or creating directories

- name: Add path in access_log in location block to list of log locations
  loop: "{{ _nginx_location_block.access_log.logs | default([]) }}"
  when:
    - not _nginx_location_block.access_log.off | default(false)
  ansible.builtin.set_fact:
    _nginx_access_log_locations: >-
      {{ (_nginx_access_log_locations | default([]) + [item.path]) | unique }}

- name: Validate max in open_log_file_cache in location block
  when:
    - _nginx_location_block.open_log_file_cache is defined
    - not _nginx_location_block.open_log_file_cache.off | default(false)
  ansible.builtin.assert:
    that:
      - _nginx_location_block.open_log_file_cache.max | int > 0
    fail_msg: "Directive 'max' in 'open_log_file_cache' in location block in '{{ _nginx_http_config_file.destination }}' is not a positive integer. Value: {{ _nginx_location_block.open_log_file_cache.max }}"
    success_msg: "Directive 'max' in 'open_log_file_cache' in location block in '{{ _nginx_http_config_file.destination }}' is valid. Value: {{ _nginx_location_block.open_log_file_cache.max }}"

- name: Validate inactive in open_log_file_cache in location block
  when:
    - _nginx_location_block.open_log_file_cache is defined
    - not _nginx_location_block.open_log_file_cache.off | default(false)
  ansible.builtin.assert:
    that:
      - _nginx_location_block.open_log_file_cache.inactive | community.general.to_time_unit('s') > 0
    fail_msg: "Directive 'inactive' in 'open_log_file_cache' in location block in '{{ _nginx_http_config_file.destination }}' is not a positive duration. Value: {{ _nginx_location_block.open_log_file_cache.inactive }}"
    success_msg: "Directive 'inactive' in 'open_log_file_cache' in location block in '{{ _nginx_http_config_file.destination }}' is valid. Value: {{ _nginx_location_block.open_log_file_cache.inactive }}"

- name: Validate min_uses in open_log_file_cache in location block
  when:
    - _nginx_location_block.open_log_file_cache is defined
    - not _nginx_location_block.open_log_file_cache.off | default(false)
  ansible.builtin.assert:
    that:
      - _nginx_location_block.open_log_file_cache.min_uses | int > 0
    fail_msg: "Directive 'min_uses' in 'open_log_file_cache' in location block in '{{ _nginx_http_config_file.destination }}' is not a positive integer. Value: {{ _nginx_location_block.open_log_file_cache.min_uses }}"
    success_msg: "Directive 'min_uses' in 'open_log_file_cache' in location block in '{{ _nginx_http_config_file.destination }}' is valid. Value: {{ _nginx_location_block.open_log_file_cache.min_uses }}"

- name: Validate valid in open_log_file_cache in location block
  when:
    - _nginx_location_block.open_log_file_cache is defined
    - not _nginx_location_block.open_log_file_cache.off | default(false)
  ansible.builtin.assert:
    that:
      - _nginx_location_block.open_log_file_cache.valid | community.general.to_time_unit('s') > 0
    fail_msg: "Directive 'valid' in 'open_log_file_cache' in location block in '{{ _nginx_http_config_file.destination }}' is not a positive duration. Value: {{ _nginx_location_block.open_log_file_cache.valid }}"
    success_msg: "Directive 'valid' in 'open_log_file_cache' in location block in '{{ _nginx_http_config_file.destination }}' is valid. Value: {{ _nginx_location_block.open_log_file_cache.valid }}"

# TODO - For use in future for logrotate and/or creating directories

- name: Add file in error_log in location block to list of log locations
  when:
    - _nginx_location_block.error_log is defined
  ansible.builtin.set_fact:
    _nginx_error_log_locations: >-
      {{ (_nginx_error_log_locations | default([]) + [_nginx_location_block.error_log.file]) | unique }}
