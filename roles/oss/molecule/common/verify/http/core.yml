---
- name: Check if error_page directive is set in HTTP config file
  loop: "{{ _http_config_file.error_page | default([]) }}"
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: >-
      error_page {{ item.codes | join(' ') -}}
        {{- ' ' + item.response if item.response is defined -}}
        {{- ' ' + item.uri }};
    owner: root
    group: root
    mode: '0640'
  register: _error_page_directive

- name: Verify error_page directive is set in HTTP config file
  loop: "{{ _error_page_directive.results }}"
  ansible.builtin.assert:
    that:
      - not item.changed
    fail_msg: error_page directive is not set in HTTP config file.
    success_msg: error_page directive is set in HTTP config file.
  loop_control:
    label: "{{ item.item }}"

- name: Check if limit_rate directive is set in HTTP config file
  when:
    - _http_config_file.limit_rate is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "limit_rate {{ _http_config_file.limit_rate }};"
    owner: root
    group: root
    mode: '0640'
  register: _limit_rate_directive

- name: Verify limit_rate directive is set in HTTP config file
  when:
    - _http_config_file.limit_rate is defined
  ansible.builtin.assert:
    that:
      - not _limit_rate_directive.changed
    fail_msg: limit_rate directive is not set in HTTP config file.
    success_msg: limit_rate directive is set in HTTP config file.

- name: Check if root directive is set in HTTP config file
  when:
    - _http_config_file.root is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "root {{ _http_config_file.root }};"
    owner: root
    group: root
    mode: '0640'
  register: _root_directive

- name: Verify root directive is set in HTTP config file
  when:
    - _http_config_file.root is defined
  ansible.builtin.assert:
    that:
      - not _root_directive.changed
    fail_msg: root directive is not set in HTTP config file.
    success_msg: root directive is set in HTTP config file.

- name: Check if sendfile directive is set in HTTP config file
  when:
    - _http_config_file.sendfile is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "sendfile {{ _http_config_file.sendfile | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _sendfile_directive

- name: Verify sendfile directive is set in HTTP config file
  when:
    - _http_config_file.sendfile is defined
  ansible.builtin.assert:
    that:
      - not _sendfile_directive.changed
    fail_msg: sendfile directive is not set in HTTP config file.
    success_msg: sendfile directive is set in HTTP config file.

- name: Check if absolute_redirect directive is set in HTTP config file
  when:
    - _http_config_file.absolute_redirect is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "absolute_redirect {{ _http_config_file.absolute_redirect | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _absolute_redirect_directive

- name: Verify absolute_redirect directive is set in HTTP config file
  when:
    - _http_config_file.absolute_redirect is defined
  ansible.builtin.assert:
    that:
      - not _absolute_redirect_directive.changed
    fail_msg: absolute_redirect directive is not set in HTTP config file.
    success_msg: absolute_redirect directive is set in HTTP config file.

- name: Check if aio directive is set in HTTP config file
  when:
    - _http_config_file.aio is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "aio {{ _http_config_file.aio | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _aio_directive

- name: Verify aio directive is set in HTTP config file
  when:
    - _http_config_file.aio is defined
  ansible.builtin.assert:
    that:
      - not _aio_directive.changed
    fail_msg: aio directive is not set in HTTP config file.
    success_msg: aio directive is set in HTTP config file.

- name: Check if auth_delay directive is set in HTTP config file
  when:
    - _http_config_file.auth_delay is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "auth_delay {{ _http_config_file.auth_delay }};"
    owner: root
    group: root
    mode: '0640'
  register: _auth_delay_directive

- name: Verify auth_delay directive is set in HTTP config file
  when:
    - _http_config_file.auth_delay is defined
  ansible.builtin.assert:
    that:
      - not _auth_delay_directive.changed
    fail_msg: auth_delay directive is not set in HTTP config file.
    success_msg: auth_delay directive is set in HTTP config file.

- name: Check if chunked_transfer_encoding directive is set in HTTP config file
  when:
    - _http_config_file.chunked_transfer_encoding is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "chunked_transfer_encoding {{ _http_config_file.chunked_transfer_encoding | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _chunked_transfer_encoding_directive

- name: Verify chunked_transfer_encoding directive is set in HTTP config file
  when:
    - _http_config_file.chunked_transfer_encoding is defined
  ansible.builtin.assert:
    that:
      - not _chunked_transfer_encoding_directive.changed
    fail_msg: chunked_transfer_encoding directive is not set in HTTP config file.
    success_msg: chunked_transfer_encoding directive is set in HTTP config file.

- name: Check if client_body_buffer_size directive is set in HTTP config file
  when:
    - _http_config_file.client_body_buffer_size is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "client_body_buffer_size {{ _http_config_file.client_body_buffer_size }};"
    owner: root
    group: root
    mode: '0640'
  register: _client_body_buffer_size_directive

- name: Verify client_body_buffer_size directive is set in HTTP config file
  when:
    - _http_config_file.client_body_buffer_size is defined
  ansible.builtin.assert:
    that:
      - not _client_body_buffer_size_directive.changed
    fail_msg: client_body_buffer_size directive is not set in HTTP config file.
    success_msg: client_body_buffer_size directive is set in HTTP config file.

- name: Check if client_body_in_file_only directive is set in HTTP config file
  when:
    - _http_config_file.client_body_in_file_only is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "client_body_in_file_only {{ _http_config_file.client_body_in_file_only }};"
    owner: root
    group: root
    mode: '0640'
  register: _client_body_in_file_only_directive

- name: Verify client_body_in_file_only directive is set in HTTP config file
  when:
    - _http_config_file.client_body_in_file_only is defined
  ansible.builtin.assert:
    that:
      - not _client_body_in_file_only_directive.changed
    fail_msg: client_body_in_file_only directive is not set in HTTP config file.
    success_msg: client_body_in_file_only directive is set in HTTP config file.

- name: Check if client_body_in_single_buffer directive is set in HTTP config file
  when:
    - _http_config_file.client_body_in_single_buffer is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "client_body_in_single_buffer {{ _http_config_file.client_body_in_single_buffer | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _client_body_in_single_buffer_directive

- name: Verify client_body_in_single_buffer directive is set in HTTP config file
  when:
    - _http_config_file.client_body_in_single_buffer is defined
  ansible.builtin.assert:
    that:
      - not _client_body_in_single_buffer_directive.changed
    fail_msg: client_body_in_single_buffer directive is not set in HTTP config file.
    success_msg: client_body_in_single_buffer directive is set in HTTP config file.

- name: Check if client_body_temp_path directive is set in HTTP config file
  when:
    - _http_config_file.client_body_temp_path is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: >-
      client_body_temp_path {{ _http_config_file.client_body_temp_path.path -}}
        {{- ' 1' if _http_config_file.client_body_temp_path.level | default(0) > 0 -}}
        {{- ' 2' if _http_config_file.client_body_temp_path.level | default(0) > 1 -}}
        {{- ' 3' if _http_config_file.client_body_temp_path.level | default(0) > 2 }};
    owner: root
    group: root
    mode: '0640'
  register: _client_body_temp_path_directive

- name: Verify client_body_temp_path directive is set in HTTP config file
  when:
    - _http_config_file.client_body_temp_path is defined
  ansible.builtin.assert:
    that:
      - not _client_body_temp_path_directive.changed
    fail_msg: client_body_temp_path directive is not set in HTTP config file.
    success_msg: client_body_temp_path directive is set in HTTP config file.

- name: Check if client_body_timeout directive is set in HTTP config file
  when:
    - _http_config_file.client_body_timeout is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "client_body_timeout {{ _http_config_file.client_body_timeout }};"
    owner: root
    group: root
    mode: '0640'
  register: _client_body_timeout_directive

- name: Verify client_body_timeout directive is set in HTTP config file
  when:
    - _http_config_file.client_body_timeout is defined
  ansible.builtin.assert:
    that:
      - not _client_body_timeout_directive.changed
    fail_msg: client_body_timeout directive is not set in HTTP config file.
    success_msg: client_body_timeout directive is set in HTTP config file.

- name: Check if client_max_body_size directive is set in HTTP config file
  when:
    - _http_config_file.client_max_body_size is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "client_max_body_size {{ _http_config_file.client_max_body_size }};"
    owner: root
    group: root
    mode: '0640'
  register: _client_max_body_size_directive

- name: Verify client_max_body_size directive is set in HTTP config file
  when:
    - _http_config_file.client_max_body_size is defined
  ansible.builtin.assert:
    that:
      - not _client_max_body_size_directive.changed
    fail_msg: client_max_body_size directive is not set in HTTP config file.
    success_msg: client_max_body_size directive is set in HTTP config file.

- name: Check if default_type directive is set in HTTP config file
  when:
    - _http_config_file.default_type is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "default_type {{ _http_config_file.default_type }};"
    owner: root
    group: root
    mode: '0640'
  register: _default_type_directive

- name: Verify default_type directive is set in HTTP config file
  when:
    - _http_config_file.default_type is defined
  ansible.builtin.assert:
    that:
      - not _default_type_directive.changed
    fail_msg: default_type directive is not set in HTTP config file.
    success_msg: default_type directive is set in HTTP config file.

- name: Check if directio directive is set in HTTP config file
  when:
    - _http_config_file.directio is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "directio {{ _http_config_file.directio }};"
    owner: root
    group: root
    mode: '0640'
  register: _directio_directive

- name: Verify directio directive is set in HTTP config file
  when:
    - _http_config_file.directio is defined
  ansible.builtin.assert:
    that:
      - not _directio_directive.changed
    fail_msg: directio directive is not set in HTTP config file.
    success_msg: directio directive is set in HTTP config file.

- name: Check if directio_alignment directive is set in HTTP config file
  when:
    - _http_config_file.directio_alignment is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "directio_alignment {{ _http_config_file.directio_alignment }};"
    owner: root
    group: root
    mode: '0640'
  register: _directio_alignment_directive

- name: Verify directio_alignment directive is set in HTTP config file
  when:
    - _http_config_file.directio_alignment is defined
  ansible.builtin.assert:
    that:
      - not _directio_alignment_directive.changed
    fail_msg: directio_alignment directive is not set in HTTP config file.
    success_msg: directio_alignment directive is set in HTTP config file.

- name: Check if disable_symlinks directive is set in HTTP config file (off)
  when:
    - _http_config_file.disable_symlinks is defined
    - _http_config_file.disable_symlinks.off | default(false)
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "disable_symlinks off;"
    owner: root
    group: root
    mode: '0640'
  register: _disable_symlinks_off_directive

- name: Verify disable_symlinks directive is set in HTTP config file (off)
  when:
    - _http_config_file.disable_symlinks is defined
    - _http_config_file.disable_symlinks.off | default(false)
  ansible.builtin.assert:
    that:
      - not _disable_symlinks_off_directive.changed
    fail_msg: disable_symlinks directive is not set in HTTP config file.
    success_msg: disable_symlinks directive is set in HTTP config file.

- name: Check if disable_symlinks directive is set in HTTP config file (if_not_owner)
  when:
    - _http_config_file.disable_symlinks is defined
    - not _http_config_file.disable_symlinks.off | default(false)
    - _http_config_file.disable_symlinks.if_not_owner | default(false)
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "disable_symlinks if_not_owner{{ ' from=' + _http_config_file.disable_symlinks.from | string if _http_config_file.disable_symlinks.from is defined }};"
    owner: root
    group: root
    mode: '0640'
  register: _disable_symlinks_if_not_owner_directive

- name: Verify disable_symlinks directive is set in HTTP config file (if_not_owner)
  when:
    - _http_config_file.disable_symlinks is defined
    - not _http_config_file.disable_symlinks.off | default(false)
    - _http_config_file.disable_symlinks.if_not_owner | default(false)
  ansible.builtin.assert:
    that:
      - not _disable_symlinks_if_not_owner_directive.changed
    fail_msg: disable_symlinks directive is not set in HTTP config file.
    success_msg: disable_symlinks directive is set in HTTP config file.

- name: Check if disable_symlinks directive is set in HTTP config file
  when:
    - _http_config_file.disable_symlinks is defined
    - not _http_config_file.disable_symlinks.off | default(false)
    - not _http_config_file.disable_symlinks.if_not_owner | default(false)
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "disable_symlinks on{{ ' from=' + _http_config_file.disable_symlinks.from | string if _http_config_file.disable_symlinks.from is defined }};"
    owner: root
    group: root
    mode: '0640'
  register: _disable_symlinks_directive

- name: Verify disable_symlinks directive is set in HTTP config file
  when:
    - _http_config_file.disable_symlinks is defined
    - not _http_config_file.disable_symlinks.off | default(false)
    - not _http_config_file.disable_symlinks.if_not_owner | default(false)
  ansible.builtin.assert:
    that:
      - not _disable_symlinks_directive.changed
    fail_msg: disable_symlinks directive is not set in HTTP config file.
    success_msg: disable_symlinks directive is set in HTTP config file.

- name: Check if etag directive is set in HTTP config file
  when:
    - _http_config_file.etag is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "etag {{ _http_config_file.etag | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _etag_directive

- name: Verify etag directive is set in HTTP config file
  when:
    - _http_config_file.etag is defined
  ansible.builtin.assert:
    that:
      - not _etag_directive.changed
    fail_msg: etag directive is not set in HTTP config file.
    success_msg: etag directive is set in HTTP config file.

- name: Check if if_modified_since directive is set in HTTP config file
  when:
    - _http_config_file.if_modified_since is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "if_modified_since {{ _http_config_file.if_modified_since }};"
    owner: root
    group: root
    mode: '0640'
  register: _if_modified_since_directive

- name: Verify if_modified_since directive is set in HTTP config file
  when:
    - _http_config_file.if_modified_since is defined
  ansible.builtin.assert:
    that:
      - not _if_modified_since_directive.changed
    fail_msg: if_modified_since directive is not set in HTTP config file.
    success_msg: if_modified_since directive is set in HTTP config file.

- name: Check if keepalive_disable directive is set in HTTP config file
  when:
    - _http_config_file.keepalive_disable is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "keepalive_disable {{ 'none' if _http_config_file.keepalive_disable.none | default(false) else _http_config_file.keepalive_disable.browsers | join(' ') }};"
    owner: root
    group: root
    mode: '0640'
  register: _keepalive_disable_directive

- name: Verify keepalive_disable directive is set in HTTP config file
  when:
    - _http_config_file.keepalive_disable is defined
  ansible.builtin.assert:
    that:
      - not _keepalive_disable_directive.changed
    fail_msg: keepalive_disable directive is not set in HTTP config file.
    success_msg: keepalive_disable directive is set in HTTP config file.

- name: Check if keepalive_requests directive is set in HTTP config file
  when:
    - _http_config_file.keepalive_requests is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "keepalive_requests {{ _http_config_file.keepalive_requests }};"
    owner: root
    group: root
    mode: '0640'
  register: _keepalive_requests_directive

- name: Verify keepalive_requests directive is set in HTTP config file
  when:
    - _http_config_file.keepalive_requests is defined
  ansible.builtin.assert:
    that:
      - not _keepalive_requests_directive.changed
    fail_msg: keepalive_requests directive is not set in HTTP config file.
    success_msg: keepalive_requests directive is set in HTTP config file.

- name: Check if keepalive_time directive is set in HTTP config file
  when:
    - _http_config_file.keepalive_time is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "keepalive_time {{ _http_config_file.keepalive_time }};"
    owner: root
    group: root
    mode: '0640'
  register: _keepalive_time_directive

- name: Verify keepalive_time directive is set in HTTP config file
  when:
    - _http_config_file.keepalive_time is defined
  ansible.builtin.assert:
    that:
      - not _keepalive_time_directive.changed
    fail_msg: keepalive_time directive is not set in HTTP config file.
    success_msg: keepalive_time directive is set in HTTP config file.

- name: Check if keepalive_timeout directive is set in HTTP config file
  when:
    - _http_config_file.keepalive_timeout is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: >-
      keepalive_timeout {{ _http_config_file.keepalive_timeout.timeout -}}
        {{- ' ' + _http_config_file.keepalive_timeout.header_timeout | string if _http_config_file.keepalive_timeout.header_timeout is defined }};
    owner: root
    group: root
    mode: '0640'
  register: _keepalive_timeout_directive

- name: Verify keepalive_timeout directive is set in HTTP config file
  when:
    - _http_config_file.keepalive_timeout is defined
  ansible.builtin.assert:
    that:
      - not _keepalive_timeout_directive.changed
    fail_msg: keepalive_timeout directive is not set in HTTP config file.
    success_msg: keepalive_timeout directive is set in HTTP config file.

- name: Check if lingering_close directive is set in HTTP config file
  when:
    - _http_config_file.lingering_close is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "lingering_close {{ _http_config_file.lingering_close }};"
    owner: root
    group: root
    mode: '0640'
  register: _lingering_close_directive

- name: Verify lingering_close directive is set in HTTP config file
  when:
    - _http_config_file.lingering_close is defined
  ansible.builtin.assert:
    that:
      - not _lingering_close_directive.changed
    fail_msg: lingering_close directive is not set in HTTP config file.
    success_msg: lingering_close directive is set in HTTP config file.

- name: Check if lingering_time directive is set in HTTP config file
  when:
    - _http_config_file.lingering_time is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "lingering_time {{ _http_config_file.lingering_time }};"
    owner: root
    group: root
    mode: '0640'
  register: _lingering_time_directive

- name: Verify lingering_time directive is set in HTTP config file
  when:
    - _http_config_file.lingering_time is defined
  ansible.builtin.assert:
    that:
      - not _lingering_time_directive.changed
    fail_msg: lingering_time directive is not set in HTTP config file.
    success_msg: lingering_time directive is set in HTTP config file.

- name: Check if lingering_timeout directive is set in HTTP config file
  when:
    - _http_config_file.lingering_timeout is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "lingering_timeout {{ _http_config_file.lingering_timeout }};"
    owner: root
    group: root
    mode: '0640'
  register: _lingering_timeout_directive

- name: Verify lingering_timeout directive is set in HTTP config file
  when:
    - _http_config_file.lingering_timeout is defined
  ansible.builtin.assert:
    that:
      - not _lingering_timeout_directive.changed
    fail_msg: lingering_timeout directive is not set in HTTP config file.
    success_msg: lingering_timeout directive is set in HTTP config file.

- name: Check if log_not_found directive is set in HTTP config file
  when:
    - _http_config_file.log_not_found is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "log_not_found {{ _http_config_file.log_not_found | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _log_not_found_directive

- name: Verify log_not_found directive is set in HTTP config file
  when:
    - _http_config_file.log_not_found is defined
  ansible.builtin.assert:
    that:
      - not _log_not_found_directive.changed
    fail_msg: log_not_found directive is not set in HTTP config file.
    success_msg: log_not_found directive is set in HTTP config file.

- name: Check if log_subrequest directive is set in HTTP config file
  when:
    - _http_config_file.log_subrequest is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "log_subrequest {{ _http_config_file.log_subrequest | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _log_subrequest_directive

- name: Verify log_subrequest directive is set in HTTP config file
  when:
    - _http_config_file.log_subrequest is defined
  ansible.builtin.assert:
    that:
      - not _log_subrequest_directive.changed
    fail_msg: log_subrequest directive is not set in HTTP config file.
    success_msg: log_subrequest directive is set in HTTP config file.

- name: Check if max_ranges directive is set in HTTP config file
  when:
    - _http_config_file.max_ranges is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "max_ranges {{ _http_config_file.max_ranges }};"
    owner: root
    group: root
    mode: '0640'
  register: _max_ranges_directive

- name: Verify max_ranges directive is set in HTTP config file
  when:
    - _http_config_file.max_ranges is defined
  ansible.builtin.assert:
    that:
      - not _max_ranges_directive.changed
    fail_msg: max_ranges directive is not set in HTTP config file.
    success_msg: max_ranges directive is set in HTTP config file.

- name: Check if msie_padding directive is set in HTTP config file
  when:
    - _http_config_file.msie_padding is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "msie_padding {{ _http_config_file.msie_padding | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _msie_padding_directive

- name: Verify msie_padding directive is set in HTTP config file
  when:
    - _http_config_file.msie_padding is defined
  ansible.builtin.assert:
    that:
      - not _msie_padding_directive.changed
    fail_msg: msie_padding directive is not set in HTTP config file.
    success_msg: msie_padding directive is set in HTTP config file.

- name: Check if msie_refresh directive is set in HTTP config file
  when:
    - _http_config_file.msie_refresh is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "msie_refresh {{ _http_config_file.msie_refresh | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _msie_refresh_directive

- name: Verify msie_refresh directive is set in HTTP config file
  when:
    - _http_config_file.msie_refresh is defined
  ansible.builtin.assert:
    that:
      - not _msie_refresh_directive.changed
    fail_msg: msie_refresh directive is not set in HTTP config file.
    success_msg: msie_refresh directive is set in HTTP config file.

- name: Check if open_file_cache directive is set in HTTP config file (off)
  when:
    - _http_config_file.open_file_cache is defined
    - _http_config_file.open_file_cache.off | default(false)
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "open_file_cache off;"
    owner: root
    group: root
    mode: '0640'
  register: _open_file_cache_off_directive

- name: Verify open_file_cache directive is set in HTTP config file (off)
  when:
    - _http_config_file.open_file_cache is defined
    - _http_config_file.open_file_cache.off | default(false)
  ansible.builtin.assert:
    that:
      - not _open_file_cache_off_directive.changed
    fail_msg: open_file_cache directive is not set in HTTP config file.
    success_msg: open_file_cache directive is set in HTTP config file.

- name: Check if open_file_cache directive is set in HTTP config file
  when:
    - _http_config_file.open_file_cache is defined
    - not _http_config_file.open_file_cache.off | default(false)
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: >-
      open_file_cache max={{ _http_config_file.open_file_cache.max -}}
        {{- ' inactive=' + _http_config_file.open_file_cache.inactive | string if _http_config_file.open_file_cache.inactive is defined }};
    owner: root
    group: root
    mode: '0640'
  register: _open_file_cache_directive

- name: Verify open_file_cache directive is set in HTTP config file
  when:
    - _http_config_file.open_file_cache is defined
    - not _http_config_file.open_file_cache.off | default(false)
  ansible.builtin.assert:
    that:
      - not _open_file_cache_directive.changed
    fail_msg: open_file_cache directive is not set in HTTP config file.
    success_msg: open_file_cache directive is set in HTTP config file.

- name: Check if open_file_cache_errors directive is set in HTTP config file
  when:
    - _http_config_file.open_file_cache_errors is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "open_file_cache_errors {{ _http_config_file.open_file_cache_errors | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _open_file_cache_errors_directive

- name: Verify open_file_cache_errors directive is set in HTTP config file
  when:
    - _http_config_file.open_file_cache_errors is defined
  ansible.builtin.assert:
    that:
      - not _open_file_cache_errors_directive.changed
    fail_msg: open_file_cache_errors directive is not set in HTTP config file.
    success_msg: open_file_cache_errors directive is set in HTTP config file.

- name: Check if open_file_cache_min_uses directive is set in HTTP config file
  when:
    - _http_config_file.open_file_cache_min_uses is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "open_file_cache_min_uses {{ _http_config_file.open_file_cache_min_uses }};"
    owner: root
    group: root
    mode: '0640'
  register: _open_file_cache_min_uses_directive

- name: Verify open_file_cache_min_uses directive is set in HTTP config file
  when:
    - _http_config_file.open_file_cache_min_uses is defined
  ansible.builtin.assert:
    that:
      - not _open_file_cache_min_uses_directive.changed
    fail_msg: open_file_cache_min_uses directive is not set in HTTP config file.
    success_msg: open_file_cache_min_uses directive is set in HTTP config file.

- name: Check if open_file_cache_valid directive is set in HTTP config file
  when:
    - _http_config_file.open_file_cache_valid is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "open_file_cache_valid {{ _http_config_file.open_file_cache_valid }};"
    owner: root
    group: root
    mode: '0640'
  register: _open_file_cache_valid_directive

- name: Verify open_file_cache_valid directive is set in HTTP config file
  when:
    - _http_config_file.open_file_cache_valid is defined
  ansible.builtin.assert:
    that:
      - not _open_file_cache_valid_directive.changed
    fail_msg: open_file_cache_valid directive is not set in HTTP config file.
    success_msg: open_file_cache_valid directive is set in HTTP config file.

- name: Check if output_buffers directive is set in HTTP config file
  when:
    - _http_config_file.output_buffers is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "output_buffers {{ _http_config_file.output_buffers.count }} {{ _http_config_file.output_buffers.size }};"
    owner: root
    group: root
    mode: '0640'
  register: _output_buffers_directive

- name: Verify output_buffers directive is set in HTTP config file
  when:
    - _http_config_file.output_buffers is defined
  ansible.builtin.assert:
    that:
      - not _output_buffers_directive.changed
    fail_msg: output_buffers directive is not set in HTTP config file.
    success_msg: output_buffers directive is set in HTTP config file.

- name: Check if port_in_redirect directive is set in HTTP config file
  when:
    - _http_config_file.port_in_redirect is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "port_in_redirect {{ _http_config_file.port_in_redirect | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _port_in_redirect_directive

- name: Verify port_in_redirect directive is set in HTTP config file
  when:
    - _http_config_file.port_in_redirect is defined
  ansible.builtin.assert:
    that:
      - not _port_in_redirect_directive.changed
    fail_msg: port_in_redirect directive is not set in HTTP config file.
    success_msg: port_in_redirect directive is set in HTTP config file.

- name: Check if read_ahead directive is set in HTTP config file
  when:
    - _http_config_file.read_ahead is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "read_ahead {{ _http_config_file.read_ahead }};"
    owner: root
    group: root
    mode: '0640'
  register: _read_ahead_directive

- name: Verify read_ahead directive is set in HTTP config file
  when:
    - _http_config_file.read_ahead is defined
  ansible.builtin.assert:
    that:
      - not _read_ahead_directive.changed
    fail_msg: read_ahead directive is not set in HTTP config file.
    success_msg: read_ahead directive is set in HTTP config file.

- name: Check if recursive_error_pages directive is set in HTTP config file
  when:
    - _http_config_file.recursive_error_pages is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "recursive_error_pages {{ _http_config_file.recursive_error_pages | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _recursive_error_pages_directive

- name: Verify recursive_error_pages directive is set in HTTP config file
  when:
    - _http_config_file.recursive_error_pages is defined
  ansible.builtin.assert:
    that:
      - not _recursive_error_pages_directive.changed
    fail_msg: recursive_error_pages directive is not set in HTTP config file.
    success_msg: recursive_error_pages directive is set in HTTP config file.

- name: Check if reset_timedout_connection directive is set in HTTP config file
  when:
    - _http_config_file.reset_timedout_connection is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "reset_timedout_connection {{ _http_config_file.reset_timedout_connection | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _reset_timedout_connection_directive

- name: Verify reset_timedout_connection directive is set in HTTP config file
  when:
    - _http_config_file.reset_timedout_connection is defined
  ansible.builtin.assert:
    that:
      - not _reset_timedout_connection_directive.changed
    fail_msg: reset_timedout_connection directive is not set in HTTP config file.
    success_msg: reset_timedout_connection directive is set in HTTP config file.

- name: Check if resolver directive is set in HTTP config file
  loop: "{{ _http_config_file.resolver | default([]) }}"
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: >-
      resolver {{ item.addresses | join(' ') -}}
        {{- ' valid=' + item.valid | string if item.valid is defined -}}
        {{- ' ipv4=' + item.ipv4 | ternary('on', 'off') if item.ipv4 is defined -}}
        {{- ' ipv6=' + item.ipv6 | ternary('on', 'off') if item.ipv6 is defined -}}
        {{- ' status_zone=' + item.status_zone | string if item.status_zone is defined }};
    owner: root
    group: root
    mode: '0640'
  register: _resolver_directive

- name: Verify resolver directive is set in HTTP config file
  loop: "{{ _resolver_directive.results }}"
  ansible.builtin.assert:
    that:
      - not item.changed
    fail_msg: resolver directive is not set in HTTP config file.
    success_msg: resolver directive is set in HTTP config file.
  loop_control:
    label: "{{ item.item }}"

- name: Check if resolver_timeout directive is set in HTTP config file
  when:
    - _http_config_file.resolver_timeout is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "resolver_timeout {{ _http_config_file.resolver_timeout }};"
    owner: root
    group: root
    mode: '0640'
  register: _resolver_timeout_directive

- name: Verify resolver_timeout directive is set in HTTP config file
  when:
    - _http_config_file.resolver_timeout is defined
  ansible.builtin.assert:
    that:
      - not _resolver_timeout_directive.changed
    fail_msg: resolver_timeout directive is not set in HTTP config file.
    success_msg: resolver_timeout directive is set in HTTP config file.

- name: Check if satisfy directive is set in HTTP config file
  when:
    - _http_config_file.satisfy is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "satisfy {{ _http_config_file.satisfy }};"
    owner: root
    group: root
    mode: '0640'
  register: _satisfy_directive

- name: Verify satisfy directive is set in HTTP config file
  when:
    - _http_config_file.satisfy is defined
  ansible.builtin.assert:
    that:
      - not _satisfy_directive.changed
    fail_msg: satisfy directive is not set in HTTP config file.
    success_msg: satisfy directive is set in HTTP config file.

- name: Check if send_lowat directive is set in HTTP config file
  when:
    - _http_config_file.send_lowat is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "send_lowat {{ _http_config_file.send_lowat }};"
    owner: root
    group: root
    mode: '0640'
  register: _send_lowat_directive

- name: Verify send_lowat directive is set in HTTP config file
  when:
    - _http_config_file.send_lowat is defined
  ansible.builtin.assert:
    that:
      - not _send_lowat_directive.changed
    fail_msg: send_lowat directive is not set in HTTP config file.
    success_msg: send_lowat directive is set in HTTP config file.

- name: Check if send_timeout directive is set in HTTP config file
  when:
    - _http_config_file.send_timeout is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "send_timeout {{ _http_config_file.send_timeout }};"
    owner: root
    group: root
    mode: '0640'
  register: _send_timeout_directive

- name: Verify send_timeout directive is set in HTTP config file
  when:
    - _http_config_file.send_timeout is defined
  ansible.builtin.assert:
    that:
      - not _send_timeout_directive.changed
    fail_msg: send_timeout directive is not set in HTTP config file.
    success_msg: send_timeout directive is set in HTTP config file.

- name: Check if server_name_in_redirect directive is set in HTTP config file
  when:
    - _http_config_file.server_name_in_redirect is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "server_name_in_redirect {{ _http_config_file.server_name_in_redirect | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _server_name_in_redirect_directive

- name: Verify server_name_in_redirect directive is set in HTTP config file
  when:
    - _http_config_file.server_name_in_redirect is defined
  ansible.builtin.assert:
    that:
      - not _server_name_in_redirect_directive.changed
    fail_msg: server_name_in_redirect directive is not set in HTTP config file.
    success_msg: server_name_in_redirect directive is set in HTTP config file.

- name: Check if server_tokens directive is set in HTTP config file
  when:
    - _http_config_file.server_tokens is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "server_tokens {{ _http_config_file.server_tokens }};"
    owner: root
    group: root
    mode: '0640'
  register: _server_tokens_directive

- name: Verify server_tokens directive is set in HTTP config file
  when:
    - _http_config_file.server_tokens is defined
  ansible.builtin.assert:
    that:
      - not _server_tokens_directive.changed
    fail_msg: server_tokens directive is not set in HTTP config file.
    success_msg: server_tokens directive is set in HTTP config file.

- name: Check if subrequest_output_buffer_size directive is set in HTTP config file
  when:
    - _http_config_file.subrequest_output_buffer_size is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "subrequest_output_buffer_size {{ _http_config_file.subrequest_output_buffer_size }};"
    owner: root
    group: root
    mode: '0640'
  register: _subrequest_output_buffer_size_directive

- name: Verify subrequest_output_buffer_size directive is set in HTTP config file
  when:
    - _http_config_file.subrequest_output_buffer_size is defined
  ansible.builtin.assert:
    that:
      - not _subrequest_output_buffer_size_directive.changed
    fail_msg: subrequest_output_buffer_size directive is not set in HTTP config file.
    success_msg: subrequest_output_buffer_size directive is set in HTTP config file.

- name: Check if tcp_nodelay directive is set in HTTP config file
  when:
    - _http_config_file.tcp_nodelay is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "tcp_nodelay {{ _http_config_file.tcp_nodelay | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _tcp_nodelay_directive

- name: Verify tcp_nodelay directive is set in HTTP config file
  when:
    - _http_config_file.tcp_nodelay is defined
  ansible.builtin.assert:
    that:
      - not _tcp_nodelay_directive.changed
    fail_msg: tcp_nodelay directive is not set in HTTP config file.
    success_msg: tcp_nodelay directive is set in HTTP config file.

- name: Check if tcp_nopush directive is set in HTTP config file
  when:
    - _http_config_file.tcp_nopush is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "tcp_nopush {{ _http_config_file.tcp_nopush | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _tcp_nopush_directive

- name: Verify tcp_nopush directive is set in HTTP config file
  when:
    - _http_config_file.tcp_nopush is defined
  ansible.builtin.assert:
    that:
      - not _tcp_nopush_directive.changed
    fail_msg: tcp_nopush directive is not set in HTTP config file.
    success_msg: tcp_nopush directive is set in HTTP config file.

- name: Check if types_hash_bucket_size directive is set in HTTP config file
  when:
    - _http_config_file.types_hash_bucket_size is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "types_hash_bucket_size {{ _http_config_file.types_hash_bucket_size }};"
    owner: root
    group: root
    mode: '0640'
  register: _types_hash_bucket_size_directive

- name: Verify types_hash_bucket_size directive is set in HTTP config file
  when:
    - _http_config_file.types_hash_bucket_size is defined
  ansible.builtin.assert:
    that:
      - not _types_hash_bucket_size_directive.changed
    fail_msg: types_hash_bucket_size directive is not set in HTTP config file.
    success_msg: types_hash_bucket_size directive is set in HTTP config file.

- name: Check if types_hash_max_size directive is set in HTTP config file
  when:
    - _http_config_file.types_hash_max_size is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "types_hash_max_size {{ _http_config_file.types_hash_max_size }};"
    owner: root
    group: root
    mode: '0640'
  register: _types_hash_max_size_directive

- name: Verify types_hash_max_size directive is set in HTTP config file
  when:
    - _http_config_file.types_hash_max_size is defined
  ansible.builtin.assert:
    that:
      - not _types_hash_max_size_directive.changed
    fail_msg: types_hash_max_size directive is not set in HTTP config file.
    success_msg: types_hash_max_size directive is set in HTTP config file.
  
- name: Check if client_header_buffer_size directive is set in HTTP config file
  when:
    - _http_config_file.client_header_buffer_size is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "client_header_buffer_size {{ _http_config_file.client_header_buffer_size }};"
    owner: root
    group: root
    mode: '0640'
  register: _client_header_buffer_size_directive

- name: Verify client_header_buffer_size directive is set in HTTP config file
  when:
    - _http_config_file.client_header_buffer_size is defined
  ansible.builtin.assert:
    that:
      - not _client_header_buffer_size_directive.changed
    fail_msg: client_header_buffer_size directive is not set in HTTP config file.
    success_msg: client_header_buffer_size directive is set in HTTP config file.

- name: Check if client_header_timeout directive is set in HTTP config file
  when:
    - _http_config_file.client_header_timeout is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "client_header_timeout {{ _http_config_file.client_header_timeout }};"
    owner: root
    group: root
    mode: '0640'
  register: _client_header_timeout_directive

- name: Verify client_header_timeout directive is set in HTTP config file
  when:
    - _http_config_file.client_header_timeout is defined
  ansible.builtin.assert:
    that:
      - not _client_header_timeout_directive.changed
    fail_msg: client_header_timeout directive is not set in HTTP config file.
    success_msg: client_header_timeout directive is set in HTTP config file.

- name: Check if connection_pool_size directive is set in HTTP config file
  when:
    - _http_config_file.connection_pool_size is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "connection_pool_size {{ _http_config_file.connection_pool_size }};"
    owner: root
    group: root
    mode: '0640'
  register: _connection_pool_size_directive

- name: Verify connection_pool_size directive is set in HTTP config file
  when:
    - _http_config_file.connection_pool_size is defined
  ansible.builtin.assert:
    that:
      - not _connection_pool_size_directive.changed
    fail_msg: connection_pool_size directive is not set in HTTP config file.
    success_msg: connection_pool_size directive is set in HTTP config file.

- name: Check if ignore_invalid_headers directive is set in HTTP config file
  when:
    - _http_config_file.ignore_invalid_headers is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "ignore_invalid_headers {{ _http_config_file.ignore_invalid_headers | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _ignore_invalid_headers_directive

- name: Verify ignore_invalid_headers directive is set in HTTP config file
  when:
    - _http_config_file.ignore_invalid_headers is defined
  ansible.builtin.assert:
    that:
      - not _ignore_invalid_headers_directive.changed
    fail_msg: ignore_invalid_headers directive is not set in HTTP config file.
    success_msg: ignore_invalid_headers directive is set in HTTP config file.

- name: Check if large_client_header_buffers directive is set in HTTP config file
  when:
    - _http_config_file.large_client_header_buffers is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "large_client_header_buffers {{ _http_config_file.large_client_header_buffers.count }} {{ _http_config_file.large_client_header_buffers.size }};"
    owner: root
    group: root
    mode: '0640'
  register: _large_client_header_buffers_directive

- name: Verify large_client_header_buffers directive is set in HTTP config file
  when:
    - _http_config_file.large_client_header_buffers is defined
  ansible.builtin.assert:
    that:
      - not _large_client_header_buffers_directive.changed
    fail_msg: large_client_header_buffers directive is not set in HTTP config file.
    success_msg: large_client_header_buffers directive is set in HTTP config file.

- name: Check if merge_slashes directive is set in HTTP config file
  when:
    - _http_config_file.merge_slashes is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "merge_slashes {{ _http_config_file.merge_slashes | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _merge_slashes_directive

- name: Verify merge_slashes directive is set in HTTP config file
  when:
    - _http_config_file.merge_slashes is defined
  ansible.builtin.assert:
    that:
      - not _merge_slashes_directive.changed
    fail_msg: merge_slashes directive is not set in HTTP config file.
    success_msg: merge_slashes directive is set in HTTP config file.

- name: Check if request_pool_size directive is set in HTTP config file
  when:
    - _http_config_file.request_pool_size is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "request_pool_size {{ _http_config_file.request_pool_size }};"
    owner: root
    group: root
    mode: '0640'
  register: _request_pool_size_directive

- name: Verify request_pool_size directive is set in HTTP config file
  when:
    - _http_config_file.request_pool_size is defined
  ansible.builtin.assert:
    that:
      - not _request_pool_size_directive.changed
    fail_msg: request_pool_size directive is not set in HTTP config file.
    success_msg: request_pool_size directive is set in HTTP config file.

- name: Check if underscores_in_headers directive is set in HTTP config file
  when:
    - _http_config_file.underscores_in_headers is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "underscores_in_headers {{ _http_config_file.underscores_in_headers | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _underscores_in_headers_directive

- name: Verify underscores_in_headers directive is set in HTTP config file
  when:
    - _http_config_file.underscores_in_headers is defined
  ansible.builtin.assert:
    that:
      - not _underscores_in_headers_directive.changed
    fail_msg: underscores_in_headers directive is not set in HTTP config file.
    success_msg: underscores_in_headers directive is set in HTTP config file.

- name: Check if server_names_hash_bucket_size directive is set in HTTP config file
  when:
    - _http_config_file.server_names_hash_bucket_size is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "server_names_hash_bucket_size {{ _http_config_file.server_names_hash_bucket_size }};"
    owner: root
    group: root
    mode: '0640'
  register: _server_names_hash_bucket_size_directive

- name: Verify server_names_hash_bucket_size directive is set in HTTP config file
  when:
    - _http_config_file.server_names_hash_bucket_size is defined
  ansible.builtin.assert:
    that:
      - not _server_names_hash_bucket_size_directive.changed
    fail_msg: server_names_hash_bucket_size directive is not set in HTTP config file.
    success_msg: server_names_hash_bucket_size directive is set in HTTP config file.

- name: Check if server_names_hash_max_size directive is set in HTTP config file
  when:
    - _http_config_file.server_names_hash_max_size is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "server_names_hash_max_size {{ _http_config_file.server_names_hash_max_size }};"
    owner: root
    group: root
    mode: '0640'
  register: _server_names_hash_max_size_directive

- name: Verify server_names_hash_max_size directive is set in HTTP config file
  when:
    - _http_config_file.server_names_hash_max_size is defined
  ansible.builtin.assert:
    that:
      - not _server_names_hash_max_size_directive.changed
    fail_msg: server_names_hash_max_size directive is not set in HTTP config file.
    success_msg: server_names_hash_max_size directive is set in HTTP config file.

- name: Check if variables_hash_bucket_size directive is set in HTTP config file
  when:
    - _http_config_file.variables_hash_bucket_size is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "variables_hash_bucket_size {{ _http_config_file.variables_hash_bucket_size }};"
    owner: root
    group: root
    mode: '0640'
  register: _variables_hash_bucket_size_directive

- name: Verify variables_hash_bucket_size directive is set in HTTP config file
  when:
    - _http_config_file.variables_hash_bucket_size is defined
  ansible.builtin.assert:
    that:
      - not _variables_hash_bucket_size_directive.changed
    fail_msg: variables_hash_bucket_size directive is not set in HTTP config file.
    success_msg: variables_hash_bucket_size directive is set in HTTP config file.

- name: Check if variables_hash_max_size directive is set in HTTP config file
  when:
    - _http_config_file.variables_hash_max_size is defined
  become: true
  check_mode: true
  ansible.builtin.lineinfile:
    path: "{{ _http_config_file.destination }}"
    line: "variables_hash_max_size {{ _http_config_file.variables_hash_max_size }};"
    owner: root
    group: root
    mode: '0640'
  register: _variables_hash_max_size_directive

- name: Verify variables_hash_max_size directive is set in HTTP config file
  when:
    - _http_config_file.variables_hash_max_size is defined
  ansible.builtin.assert:
    that:
      - not _variables_hash_max_size_directive.changed
    fail_msg: variables_hash_max_size directive is not set in HTTP config file.
    success_msg: variables_hash_max_size directive is set in HTTP config file.
