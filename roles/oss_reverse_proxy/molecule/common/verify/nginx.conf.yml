---
- name: Set default nginx_worker_processes variables
  when:
    - nginx_worker_processes is not defined
  ansible.builtin.set_fact:
    nginx_worker_processes:
      auto: true

- name: Set default nginx_error_log variables
  when:
    - nginx_error_log is not defined
  ansible.builtin.set_fact:
    nginx_error_log:
      file: /var/log/nginx/error.log
      level: info

- name: Set default nginx_pid variable
  when:
    - nginx_pid is not defined
  ansible.builtin.set_fact:
    nginx_pid: /var/run/nginx.pid

- name: Set default nginx_env variable
  when:
    - nginx_env is not defined
  ansible.builtin.set_fact:
    nginx_env: {}

- name: Set default nginx_thread_pool variable
  when:
    - nginx_thread_pool is not defined
  ansible.builtin.set_fact:
    nginx_thread_pool: []

- name: Set default nginx_events_worker_connections variable
  when:
    - nginx_events_worker_connections is not defined
  ansible.builtin.set_fact:
    nginx_events_worker_connections: 1024

- name: Set default nginx_http_includes variable
  when:
    - nginx_http_includes is not defined
  ansible.builtin.set_fact:
    nginx_http_includes:
      - /etc/nginx/mime.types
      - /etc/nginx/conf.d/*.conf

- name: Get nginx.conf contents
  become: true
  ansible.builtin.slurp:
    src: /etc/nginx/nginx.conf
  register: _nginx_conf

- name: Set nginx.conf contents to variable
  ansible.builtin.set_fact:
    _nginx_conf_contents: "{{ _nginx_conf.content | b64decode }}"

- name: Check if user directive is set in nginx.conf
  check_mode: true
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    line: >-
      user {{ nginx_user }} {{ nginx_group }};
    owner: root
    group: root
    mode: '0640'
  register: _nginx_user_directive

- name: Verify user directive in nginx.conf
  ansible.builtin.assert:
    that:
      - not _nginx_user_directive.changed
    fail_msg: user directive is not set in nginx.conf.
    success_msg: user directive is set in nginx.conf.

- name: Check if worker_cpu_affinity is set in nginx.conf
  when:
    - nginx_worker_cpu_affinity is defined
  check_mode: true
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    line: >-
      worker_cpu_affinity{{ ' auto' if nginx_worker_cpu_affinity.auto | default(false) -}}
        {{- ' ' + nginx_worker_cpu_affinity.mask | string if nginx_worker_cpu_affinity.mask is defined }};
    owner: root
    group: root
    mode: '0640'
  register: _nginx_worker_cpu_affinity_directive

- name: Verify worker_cpu_affinity directive in nginx.conf
  when:
    - nginx_worker_cpu_affinity is defined
  ansible.builtin.assert:
    that:
      - not _nginx_worker_cpu_affinity_directive.changed
    fail_msg: worker_cpu_affinity directive is not set in nginx.conf.
    success_msg: worker_cpu_affinity directive is set in nginx.conf.

- name: Check if worker_processes is set in nginx.conf
  check_mode: true
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    line: >-
      worker_processes {{ 'auto' if nginx_worker_processes.auto | default(false) else nginx_worker_processes.processes }};
    owner: root
    group: root
    mode: '0640'
  register: _nginx_worker_processes_directive

- name: Verify worker_processes directive in nginx.con
  ansible.builtin.assert:
    that:
      - not _nginx_worker_processes_directive.changed
    fail_msg: worker_processes directive is not set in nginx.conf.
    success_msg: worker_processes directive is set in nginx.conf.

- name: Check if worker_rlimit_core directive is set in nginx.conf
  when:
    - nginx_worker_rlimit_core is defined
  check_mode: true
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    line: >-
      worker_rlimit_core {{ nginx_worker_rlimit_core }};
    owner: root
    group: root
    mode: '0640'
  register: _nginx_worker_rlimit_core_directive

- name: Verify worker_rlimit_core directive in nginx.conf
  when:
    - nginx_worker_rlimit_core is defined
  ansible.builtin.assert:
    that:
      - not _nginx_worker_rlimit_core_directive.changed
    fail_msg: worker_rlimit_core directive is not set in nginx.conf.
    success_msg: worker_rlimit_core directive is set in nginx.conf.

- name: Check if worker_rlimit_nofile directive is set in nginx.conf
  when:
    - nginx_worker_rlimit_nofile is defined
  check_mode: true
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    line: >-
      worker_rlimit_nofile {{ nginx_worker_rlimit_nofile }};
    owner: root
    group: root
    mode: '0640'
  register: _nginx_worker_rlimit_nofile_directive

- name: Verify worker_rlimit_nofile directive in nginx.conf
  when:
    - nginx_worker_rlimit_nofile is defined
  ansible.builtin.assert:
    that:
      - not _nginx_worker_rlimit_nofile_directive.changed
    fail_msg: worker_rlimit_nofile directive is not set in nginx.conf.
    success_msg: worker_rlimit_nofile directive is set in nginx.conf.

- name: Check if worker_shutdown_timeout directive is set in nginx.conf
  when:
    - nginx_worker_shutdown_timeout is defined
  check_mode: true
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    line: >-
      worker_shutdown_timeout {{ nginx_worker_shutdown_timeout }};
    owner: root
    group: root
    mode: '0640'
  register: _nginx_worker_shutdown_timeout_directive

- name: Verify worker_shutdown_timeout directive in nginx.conf
  when:
    - nginx_worker_shutdown_timeout is defined
  ansible.builtin.assert:
    that:
      - not _nginx_worker_shutdown_timeout_directive.changed
    fail_msg: worker_shutdown_timeout directive is not set in nginx.conf.
    success_msg: worker_shutdown_timeout directive is set in nginx.conf.

- name: Check if error_log directive is set in nginx.conf
  check_mode: true
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    line: >-
      error_log {{ nginx_error_log.file -}}
        {{- ' ' + nginx_error_log.level | string if nginx_error_log.level is defined }};
    owner: root
    group: root
    mode: '0640'
  register: _nginx_error_log_directive

- name: Verify error_log directive in nginx.conf
  ansible.builtin.assert:
    that:
      - not _nginx_error_log_directive.changed
    fail_msg: error_log directive is not set in nginx.conf.
    success_msg: error_log directive is set in nginx.conf.

- name: Check if pid directive is set in nginx.conf
  check_mode: true
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    line: "pid {{ nginx_pid }};"
    owner: root
    group: root
    mode: '0640'
  register: _nginx_pid_directive

- name: Verify pid directive in nginx.conf
  ansible.builtin.assert:
    that:
      - not _nginx_pid_directive.changed
    fail_msg: pid directive is not set in nginx.conf.
    success_msg: pid directive is set in nginx.conf.

- name: Check if env directive is set in nginx.conf
  loop: "{{ nginx_env | dict2items }}"
  when:
    - nginx_env | length > 0
  check_mode: true
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    line: >-
      env {{ item.key }}={{ item.value }};
    owner: root
    group: root
    mode: '0640'
  register: _nginx_env_directive

- name: Verify env directive in nginx.conf
  loop: "{{ _nginx_env_directive.results }}"
  ansible.builtin.assert:
    that:
      - not item.changed
    fail_msg: env directive is not set in nginx.conf.
    success_msg: env directive is set in nginx.conf.
  loop_control:
    label: "{{ item.item }}"

- name: Check if thread_pool directive is set in nginx.conf
  loop: "{{ nginx_thread_pool }}"
  check_mode: true
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    line: >-
      thread_pool {{ item.name }} threads={{ item.threads -}}
                                          {{- ' max_queue=' + item.max_queue | string if item.max_queue is defined }};
    owner: root
    group: root
    mode: '0640'
  register: _nginx_thread_pool_directive

- name: Verify thread_pool directive in nginx.conf
  loop: "{{ _nginx_thread_pool_directive.results }}"
  ansible.builtin.assert:
    that:
      - not item.changed
    fail_msg: thread_pool directive is not set in nginx.conf.
    success_msg: thread_pool directive is set in nginx.conf.
  loop_control:
    label: "{{ item.item }}"

- name: Check if timer_resolution directive is set in nginx.conf
  when:
    - nginx_timer_resolution is defined
  check_mode: true
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    line: "timer_resolution {{ nginx_timer_resolution }};"
    owner: root
    group: root
    mode: '0640'
  register: _nginx_timer_resolution_directive

- name: Verify timer_resolution directive in nginx.conf
  when:
    - nginx_timer_resolution is defined
  ansible.builtin.assert:
    that:
      - not _nginx_timer_resolution_directive.changed
    fail_msg: timer_resolution directive is not set in nginx.conf.
    success_msg: timer_resolution directive is set in nginx.conf.

- name: Check if working_directory directive is set in nginx.conf
  when:
    - nginx_working_directory is defined
  check_mode: true
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    line: "working_directory {{ nginx_working_directory }};"
    owner: root
    group: root
    mode: '0640'
  register: _nginx_working_directory_directive

- name: Verify working_directory directive in nginx.conf
  when:
    - nginx_working_directory is defined
  ansible.builtin.assert:
    that:
      - not _nginx_working_directory_directive.changed
    fail_msg: working_directory directive is not set in nginx.conf.
    success_msg: working_directory directive is set in nginx.conf.

- name: Check if multi_accept directive in events block is set in nginx.conf
  when:
    - nginx_events_multi_accept is defined
  check_mode: true
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    insertafter: events {
    line: "    multi_accept {{ nginx_events_multi_accept | ternary('on', 'off') }};"
    owner: root
    group: root
    mode: '0640'
  register: _nginx_events_multi_accept_directive

- name: Verify multi_accept directive in events block in nginx.conf
  when:
    - nginx_events_multi_accept is defined
  ansible.builtin.assert:
    that:
      - not _nginx_events_multi_accept_directive.changed
    fail_msg: multi_accept directive in events block is not set in nginx.conf.
    success_msg: multi_accept directive in events block is set in nginx.conf.

- name: Check if worker_aio_requests directive in events block is set in nginx.conf
  when:
    - nginx_events_worker_aio_requests is defined
  check_mode: true
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    insertafter: events {
    line: "    worker_aio_requests {{ nginx_events_worker_aio_requests }};"
    owner: root
    group: root
    mode: '0640'
  register: _nginx_events_worker_aio_requests_directive

- name: Verify worker_aio_requests directive in events block in nginx.conf
  when:
    - nginx_events_worker_aio_requests is defined
  ansible.builtin.assert:
    that:
      - not _nginx_events_worker_aio_requests_directive.changed
    fail_msg: worker_aio_requests directive in events block is not set in nginx.conf.
    success_msg: worker_aio_requests directive in events block is set in nginx.conf.

- name: Check if worker_connections directive in events block is set in nginx.conf
  when:
    - nginx_events_worker_connections is defined
  check_mode: true
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    insertafter: events {
    line: "    worker_connections {{ nginx_events_worker_connections }};"
    owner: root
    group: root
    mode: '0640'
  register: _nginx_events_worker_connections_directive

- name: Verify worker_connections directive in events block in nginx.conf
  when:
    - nginx_events_worker_connections is defined
  ansible.builtin.assert:
    that:
      - not _nginx_events_worker_connections_directive.changed
    fail_msg: worker_connections directive in events block is not set in nginx.conf.
    success_msg: worker_connections directive in events block is set in nginx.conf.

- name: Check if include directive in http block is set in nginx.conf
  loop: "{{ nginx_http_includes }}"
  check_mode: true
  become: true
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    line: "    include {{ item }};"
    insertafter: 'http {'
    owner: root
    group: root
    mode: '0640'
  register: _nginx_http_includes_directive

- name: Verify include directive in http block in nginx.conf
  loop: "{{ _nginx_http_includes_directive.results }}"
  ansible.builtin.assert:
    that:
      - not item.changed
    fail_msg: include directive in http block is not set in nginx.conf.
    success_msg: include directive in http block is set in nginx.conf.
  loop_control:
    label: "{{ item.item }}"
