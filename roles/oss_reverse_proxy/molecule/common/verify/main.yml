---
- name: Verify
  hosts:
    - subjects
  tasks:
    - name: Set EL variables
      ansible.builtin.set_fact:
        _nginx_user: "{{ 'nginx' if ansible_os_family == 'RedHat' else 'www-data' }}"
        _nginx_group: "{{ 'nginx' if ansible_os_family == 'RedHat' else 'www-data' }}"

    - name: Set default nginx_user variable
      when:
        - nginx_user is not defined
      ansible.builtin.set_fact:
        nginx_user: "{{ _nginx_user }}"

    - name: Set default nginx_group variable
      when:
        - nginx_group is not defined
      ansible.builtin.set_fact:
        nginx_group: "{{ _nginx_group }}"

    - name: Set default nginxproxy_additional_http_config_files variable
      when:
        - nginxproxy_additional_http_config_files is not defined
      ansible.builtin.set_fact:
        nginxproxy_additional_http_config_files: []

    - name: Set default nginxproxy_redirect_server_name variable
      when:
        - nginxproxy_redirect_server_name is not defined
      ansible.builtin.set_fact:
        nginxproxy_redirect_server_name: _

    - name: Set default nginxproxy_redirect_return_server_name variable
      when:
        - nginxproxy_redirect_return_server_name is not defined
      ansible.builtin.set_fact:
        nginxproxy_redirect_return_server_name: $host
    
    - name: Set default nginxproxy_max_body_size variable
      when:
        - nginxproxy_max_body_size is not defined
      ansible.builtin.set_fact:
        nginxproxy_max_body_size: 100K

    - name: Set default nginxproxy_ssl_stapling variable
      when:
        - nginxproxy_ssl_stapling is not defined
      ansible.builtin.set_fact:
        nginxproxy_ssl_stapling: true

    - name: Set default nginxproxy_ssl_stapling_verify variable
      when:
        - nginxproxy_ssl_stapling_verify is not defined
      ansible.builtin.set_fact:
        nginxproxy_ssl_stapling_verify: true

    - name: Set other variables
      ansible.builtin.set_fact:
        nginx_allow_https: true
        _nginxproxy_http_config_files:
          - destination: /etc/nginx/conf.d/reject.conf
            server:
              - server_tokens: 'off'
                return:
                  code: 404
          - destination: /etc/nginx/conf.d/redirect.conf
            server:
              - listen:
                  - port: 80
                server_name:
                  - "{{ nginxproxy_redirect_server_name }}"
                server_tokens: 'off'
                location:
                  - path: /
                    return:
                      code: 301
                      url: "https://{{ nginxproxy_redirect_return_server_name }}$request_uri"
                  - modifier: '='
                    path: /basic_status
                    stub_status: true
                    log_not_found: false
                    allow:
                      - '127.0.0.1'
                      - '::1'
                    deny:
                      - all
          - destination: /etc/nginx/conf.d/proxy.conf
            client_body_timeout: 10s
            client_header_timeout: 10s
            client_max_body_size: "{{ nginxproxy_max_body_size }}"
            keepalive_timeout:
              timeout: 10s
            large_client_header_buffers:
              count: 2
              size: 1k
            send_timeout: 10s
            log_format:
              - name: main
                format: >-
                  'server="$server_name" host="$host” dest_port="$server_port"' 'src="$remote_addr" ip="$realip_remote_addr" user="$remote_user" ' 'time_local="$time_local" http_status="$status" ' 'http_referer="$http_referer" http_user_agent="$http_user_agent" ' 'http_x_forwarded_for="$http_x_forwarded_for" ' 'http_x_header="$http_x_header" uri_query="$query_string" uri_path="$uri" ' 'request=$request http_method="$request_method"'
            server:
              - listen:
                  - port: 443
                    ssl: true
                    http2: true
                server_name:
                  - "{{ nginxproxy_server_name }}"
                server_tokens: 'off'
                ssl_certificate:
                  - "{{ nginxproxy_server_certificate_path }}"
                ssl_certificate_key:
                  - "{{ nginxproxy_server_certificate_key_path }}"
                ssl_ciphers: ALL:!EXP:!NULL:!ADH:!LOW:!SSLv2:!SSLv3:!MD5:!RC4
                ssl_prefer_server_ciphers: true
                ssl_protocols:
                  tlsv12: true
                  tlsv13: true
                ssl_stapling: "{{ nginxproxy_ssl_stapling }}"
                ssl_stapling_verify: "{{ nginxproxy_ssl_stapling_verify }}"
                add_header:
                  - field: Strict-Transport-Security
                    value: "\"max-age=15768000;\""
                access_log:
                  logs:
                    - path: /var/log/nginx/access.log
                      format: main
                location:
                  - path: /
                    proxy_pass: "{{ nginxproxy_proxy_address }}"
                    proxy_set_header:
                      - field: Host
                        value: $proxy_host
                      - field: X-Real-IP
                        value: $remote_addr
                      - field: X-Forwarded-For
                        value: $proxy_add_x_forwarded_for
                      - field: X-Forwarded-Proto
                        value: $scheme
                      - field: X-Forwarded-Host
                        value: $host
                      - field: X-Forwarded-Port
                        value: $server_port
                    proxy_hide_header:
                      - Server
                      - X-Powered-By

    - name: Set HTTP config files variable
      ansible.builtin.set_fact:
        nginx_http_config_files: >-
          {{ _nginxproxy_http_config_files + nginxproxy_additional_http_config_files }}

    - name: Check if NGINX is installed
      when:
        - ansible_os_family != 'RedHat' or
          nginx_appstream_version is not defined
      become: true
      check_mode: true
      ansible.builtin.package:
        name:
          - nginx
        state: present
      register: _dnf_package

    - name: Verify NGINX is installed
      ansible.builtin.assert:
        that:
          - not _dnf_package.changed
        fail_msg: NGINX is not installed.
        success_msg: NGINX is installed.

    - name: Check if NGINX major version is installed
      when:
        - ansible_os_family == 'RedHat'
        - nginx_appstream_version is defined
      become: true
      check_mode: true
      ansible.builtin.dnf:
        name:
          - "@nginx:{{ nginx_appstream_version }}"
        state: present
      register: _dnf_package

    - name: Verify NGINX major version is installed
      ansible.builtin.assert:
        that:
          - not _dnf_package.changed
        fail_msg: NGINX major version is not installed.
        success_msg: NGINX major version is installed.

    - name: Check if NGINX service is enabled
      become: true
      check_mode: true
      ansible.builtin.systemd_service:
        name: nginx.service
        enabled: true
      register: _service_enabled

    - name: Verify NGINX service is enabled
      ansible.builtin.assert:
        that:
          - not _service_enabled.changed
        fail_msg: NGINX service is not enabled.
        success_msg: NGINX service is enabled.

    - name: Check if NGINX service is running
      become: true
      check_mode: true
      ansible.builtin.systemd_service:
        name: nginx.service
        state: started
      register: _service_running

    - name: Verify NGINX service is running
      ansible.builtin.assert:
        that:
          - not _service_running.changed
        fail_msg: NGINX service is not running.
        success_msg: NGINX service is running.

    - name: Verify nginx.conf
      ansible.builtin.import_tasks: nginx.conf.yml

    - name: Verify HTTP config file
      loop: "{{ nginx_http_config_files }}"
      ansible.builtin.include_tasks: http/main.yml
      loop_control:
        loop_var: _http_config_file
        label: "{{ _http_config_file.destination }}"
